{"version":3,"sources":["components/utils.js","components/Timer.js","components/SortableList.js","components/DurationSelector.js","components/Form.js","components/Chart.js","App.js","index.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","fancyTimeFormat","duration","hrs","mins","secs","ret","dateToStr","date","dd","String","getDate","padStart","mm","getMonth","getFullYear","dataHeaders","today","Date","arr","current","unshift","addDays","map","d","prototype","days","this","valueOf","setDate","taskUpdate","obj","csrf_token","a","url","BASE_URL","id","fetch","JSON","stringify","console","log","createTask","dates","dLen","tasks","Math","floor","random","elapsed","random_boolean","rnd","push","forEach","t","create_tasks","Timer","seconds","onTimeUpdate","markAsComplete","useState","timeLeft","setTimeLeft","useEffect","intervalId","setInterval","clearInterval","className","StartTimer","value","onTimerStart","onTimerPause","timer","setTimer","useContext","ActiveTask","active","setActive","completed","state","href","onClick","remaining","s","new_remaining","SortableItem","SortableElement","onActivateTask","onDeleteTask","onFinishedTask","onEditTask","active_style","setActiveStyle","type","onChange","title","e","SortableComponent","SortableContainer","items","onFocusTask","setActiveTask","taskId","index","findIndex","key","React","createContext","SortableList","newTaskCreated","completedTasksList","onUpdateTasks","onSort","setTasks","active_task","isInitialMount","useRef","isLoading","setLoading","fetchTasks","response","ok","json","updateIndex","data","task","order","sorted","sort","b","then","arrayMove","Provider","onSortEnd","oldIndex","newIndex","newOrder","taskIndex","newTasks","filter","method","headers","updates","finish_date","getCurrentDate","DurationSelector","setTaskDuration","target","defaultValue","Form","editValue","onTaskCreated","onCancelCreate","Object","keys","setValue","onSubmit","preventDefault","placeholder","autoFocus","createSampleTasks","Chart","setData","runCall","fetchData","values","result","Map","get","set","width","height","x1","y1","x2","y2","offset","stopColor","stopOpacity","strokeDasharray","dataKey","stroke","activeDot","r","fill","App","setCreateForm","newTask","setNewTask","appView","setView","refresh","setRefresh","setSort","aria-hidden","setSorting","show","onClose","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9ce79101.chunk.js","sourcesContent":["import {BASE_URL} from './../App'\n\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.valueOf());\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nexport function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function fancyTimeFormat(duration)\n{   \n    // Hours, minutes and seconds\n    var hrs = ~~(duration / 3600);\n    var mins = ~~((duration % 3600) / 60);\n    var secs = ~~duration % 60;\n\n    // Output like \"1:01\" or \"4:03:59\" or \"123:03:59\"\n    var ret = \"\";\n\n    if (hrs > 0) {\n        ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\n    }\n\n    ret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n    ret += \"\" + secs;\n    return ret;\n}\n\n\n\nexport function dateToStr(date) {\n    var dd = String(date.getDate()).padStart(2,'0');\n    var mm = String(date.getMonth() + 1).padStart(2,'0');\n    var year = date.getFullYear();\n\n    var today = year + '-' + mm + '-' + dd;\n    return today;\n}\n\nexport function dataHeaders() {\n    var today = new Date();\n    var arr = [today];\n    var i;\n    for (i = -1; i > -8; i--) {\n        var current = today;\n        arr.unshift(current.addDays(i));\n    };\n    var headers = arr.map(d => dateToStr(d))\n    return headers;\n}\n\nexport const taskUpdate = async (obj, csrf_token) => {\n    const url = BASE_URL + 'api/task-update/' + obj.id + '/'\n\n    try {\n        const update = await fetch(url, {\n            'method': 'POST',\n            'headers': {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrf_token,\n            },\n            'body': JSON.stringify(obj)\n        })\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const createTask = async (obj, csrf_token) => {\n    const url = BASE_URL + 'api/task-create/';\n\n    try {\n        const create = await fetch(url, {\n            'method': 'POST',\n            'headers' : {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrf_token,\n            },\n            'body': JSON.stringify(obj)\n        });\n    } catch (error) {\n        console.log(error)\n    }\n};\n\n// Sample task function\nexport async function createSampleTasks() {\n    var dates = dataHeaders();\n    var dLen = dates.length;\n    var tasks = [];\n    var csrf_token = getCookie('csrftoken');\n    var i;\n\n    for (i = 0; i < 50; i++) {\n        //Random date in the last week\n        var duration = Math.floor(Math.random() * (7200 - 1800 + 1)) + 1800;\n        var elapsed = Math.floor(Math.random() * duration);\n        var random_boolean = Math.random() >= 0.5;\n\n        var obj = {'title': 'Sample Task ' + i, 'duration': duration, 'remaining': elapsed};\n\n        if (random_boolean) {\n            var rnd = Math.floor(Math.random() * dLen);\n            obj['completed'] = true;\n            obj['finish_date'] = dates[rnd]\n        };\n\n        tasks.push(obj);\n    }\n    \n    const create_tasks = await tasks.forEach(t => {\n        createTask(t, csrf_token);\n    });\n\n    return create_tasks;\n\n}","import React, {useState, useEffect, useContext} from 'react'\nimport {fancyTimeFormat, getCookie, taskUpdate} from './utils'\nimport {ActiveTask} from './SortableList'\n\nconst Timer = ({ seconds, onTimeUpdate, markAsComplete }) => {\n    // initialize timeLeft with the seconds prop\n    const [timeLeft, setTimeLeft] = useState(seconds);\n  \n    useEffect(() => {\n      // exit early when we reach 0\n        if (!timeLeft) return;\n\n      // save intervalId to clear the interval when the\n      // component re-renders\n\n        const intervalId = setInterval(() => {\n        if (timeLeft > 0) {\n            setTimeLeft(timeLeft - 1);\n            onTimeUpdate(timeLeft)\n        }\n        }, 1000);\n        \n\n        if (timeLeft === 1) {\n            setTimeLeft(0);\n            onTimeUpdate(0);\n            markAsComplete();\n        }\n      // clear interval on re-render to avoid memory leaks\n        return () => clearInterval(intervalId);\n      // add timeLeft as a dependency to re-rerun the effect\n      // when we update it\n    }, [timeLeft]);\n\n    useEffect(() => {\n        setTimeLeft(seconds)\n    }, [seconds])\n\n    return (\n    <div>\n        <h1 className='has-text-success'>{fancyTimeFormat(timeLeft)}</h1>\n    </div>\n    );\n    };\n\nexport const StartTimer = ({ value, onTimerStart, onTimerPause, markAsComplete }) => {\n\n    const [timer, setTimer] = useState({'state': 'paused', 'seconds': '0'});\n    const {active, setActive} = useContext(ActiveTask);\n\n    function startTimer() {\n        setTimer({'state': 'running', 'seconds': value.remaining});\n        onTimerStart();\n        setActive(true);\n    }\n    \n    function pauseTimer() {\n        setTimer({'state': 'paused', 'seconds': '0'});\n        setActive(false);\n        onTimerPause();\n    }\n    \n    function timeUpdate(s) {\n        var csrf_token = getCookie('csrftoken');\n        \n        var new_remaining = value;\n        new_remaining.remaining = s;\n\n        taskUpdate(new_remaining, csrf_token)\n    }\n    \n    function resetTimer() {\n        setTimer({'state': 'running', 'seconds': value.duration});\n    }\n\n    function markTaskComplete() {\n        setActive(false);\n        markAsComplete();\n    }\n\n    return (\n        <div className={\"level-item \" + (value.completed ? 'is-hidden' : '')}>\n\n            {timer.state === 'paused' && active === false &&\n            <a href=\"/#\" onClick={startTimer}>\n                <span className=\"icon has-text-success\">\n                    <i className=\"fas fa-play\"></i>\n                </span>\n            </a>\n            }\n            \n            {timer.state === 'running' &&\n            <a href=\"/#\" onClick={pauseTimer}>\n                <span className=\"icon has-text-success\">\n                    <i className=\"fas fa-pause\"></i>\n                </span>\n            </a>\n            }\n\n            {timer.state === 'running' && \n            <Timer seconds={timer.seconds} onTimeUpdate={timeUpdate} markAsComplete={markTaskComplete}/>\n            }\n\n            {timer.state === 'running' &&\n                <a href=\"/#\">\n                    <span className=\"icon has-text-warning\" onClick={resetTimer}>\n                        &nbsp;&nbsp;\n                        <i className=\"fas fa-redo-alt\"></i>\n                    </span>\n                </a>\n            }\n\n        </div>\n    )\n}","import React, {useState, useEffect, useRef} from 'react'\nimport {SortableContainer, SortableElement} from 'react-sortable-hoc';\nimport arrayMove from 'array-move';\nimport {getCookie, taskUpdate,fancyTimeFormat} from './utils'\nimport {StartTimer} from './Timer'\nimport {BASE_URL} from './../App'\n\n\nconst SortableItem = SortableElement(({value, onActivateTask, onDeleteTask, onFinishedTask, onEditTask}) => {\n    const [active_style, setActiveStyle] = useState(false)\n\n    function timerStarted() {\n        onActivateTask(value.id);\n        setActiveStyle(true);\n    }\n\n    function markAsComplete() {\n        setActiveStyle(false);\n        onFinishedTask(value);\n    }\n\n    return (\n        <li className={\"box \" + (active_style ? 'task-is-active': '')}>\n            <div className=\"level is-mobile\">\n                <div className=\"level-left\">\n                    <input className={\" \" + (value.completed ? 'is-hidden' : '')} type=\"checkbox\" onChange={() => onFinishedTask(value)}/>\n                </div>\n\n                <div className=\"level-item\">\n                    <div>\n                        <h1 className={\"title is-5 \" + (value.completed ? 'is-completed': '')}>\n                            {value.title}\n                        </h1>\n                        {active_style === false &&                         \n                            <p className=\"is-help has-text-centered\">\n                                {fancyTimeFormat(value.remaining)}\n                            </p>\n                        }\n                    </div>\n                </div>\n\n                <div className=\"level-right\">\n\n                    <StartTimer value={value} onTimerStart={timerStarted} onTimerPause={() => setActiveStyle(false)} markAsComplete={markAsComplete}/>\n\n                    {active_style === false &&                     \n                    <div className={\"level-item \" + (value.completed ? 'is-hidden': '')} onClick={e => onEditTask(value)}>\n                        <a href=\"#/\">\n                            <span className=\"icon has-text-warning\">\n                                <i className=\"fas fa-edit\"></i>\n                            </span>\n                        </a>\n                    </div>\n                    }\n\n                    <div className=\"level-item\">\n                        <a href=\"#/\" onClick={e => onDeleteTask(value)}>\n                            <span className=\"icon has-text-danger\">\n                                <i className=\"fas fa-lg fa-times\"></i>\n                            </span>\n                        </a>\n                    </div>\n\n                </div>\n\n            </div>\n        </li>\n    )\n});\n\nconst SortableComponent = SortableContainer(({items, onFocusTask, onDeleteTask, onFinishedTask, onEditTask }) => {\n\n    function setActiveTask(taskId) {\n        var index = items.findIndex(i => i.id === taskId);\n        onFocusTask(index);\n    }\n\n    return (\n    <ul>\n        {items.map((value, index) => (\n            <SortableItem key={value.id} index={index} value={value} onActivateTask={setActiveTask} onDeleteTask={onDeleteTask} onFinishedTask={onFinishedTask} onEditTask={onEditTask}/>\n        ))}\n    </ul>\n    )\n})\n\n\n// Context for setting active tasks\nexport const ActiveTask = React.createContext(false)\n\nexport default function SortableList({ newTaskCreated, completedTasksList, onEditTask, onUpdateTasks, onSort }) {\n    const [tasks, setTasks] = useState([]);\n    const [active, setActive] = useState(false);\n    const active_task = {active, setActive};\n    const isInitialMount = useRef(true);\n    const [isLoading, setLoading] = useState(true);\n\n    const fetchTasks = async () => {\n        const url = BASE_URL + 'api/task-list/' + (completedTasksList ? 'completed/' : 'active/')\n        try {\n            const response = await fetch(url);\n            return response.ok ? response.json() : null;\n        } catch (error) {\n            console.log(error);\n            return null;\n        }\n    }\n\n    function updateIndex(data) {\n        var csrf_token = getCookie('csrftoken');\n        \n        data.forEach((task, index) => {\n            task.order = index;\n            taskUpdate(task, csrf_token);\n        });\n    };\n\n    useEffect(() => {\n        switch(onSort) {\n            default:\n                break;\n            case 'longest':\n                var sorted = [...tasks];\n                sorted.sort((a, b) => (a.remaining < b.remaining) ? 1 : ((b.remaining < a.remaining) ? -1 : 0));\n                setTasks(sorted);\n                break;\n            case 'shortest':\n                var sorted = [...tasks];\n                sorted.sort((a, b) => (a.remaining > b.remaining) ? 1 : ((b.remaining > a.remaining) ? -1 : 0));\n                setTasks(sorted);\n                break;\n        }\n    }, [onSort])\n\n    //Update list when new task is created\n    useEffect(() => {\n        if (isInitialMount.current) {\n            isInitialMount.current = false;\n        } else {\n            fetchTasks().then(data => {\n                data.sort((a, b) => (a.order > b.order) ? 1 : ((b.order > a.order) ? -1 : 0));\n                var index = data.findIndex(i => i.title === newTaskCreated.title);\n                data = arrayMove(data, index, 0);\n                data.forEach((value, i) => {\n                    value.order = i;\n                })\n                setTasks(data);\n                updateIndex(data);\n            })\n        }\n\n    }, [newTaskCreated])\n\n    useEffect(() => {\n        \n        fetchTasks()\n        .then(data => {\n            data.sort((a, b) => (a.order > b.order) ? 1 : ((b.order > a.order) ? -1 : 0));\n            setTasks(data);\n            setLoading(false);\n            }\n        );\n    }, [onUpdateTasks]);\n\n    const onSortEnd =  ({oldIndex, newIndex}) => {\n        var newOrder = [...tasks];\n        newOrder = arrayMove(newOrder, oldIndex, newIndex);\n                        \n        updateIndex(newOrder);\n        setTasks(newOrder);\n\n    };\n\n    function deleteTask(e) {\n        var newTasks = tasks.filter(i => i.id !== e.id);\n        setTasks(newTasks);\n\n        var csrf_token = getCookie('csrftoken');\n        var url = BASE_URL + 'api/task-delete/' + e.id + '/';\n\n        fetch(url, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrf_token,\n            }\n        });\n    }\n\n    function getCurrentDate() {\n        var date = new Date();\n        var dd = String(date.getDate()).padStart(2,'0');\n        var mm = String(date.getMonth() + 1).padStart(2,'0');\n        var year = date.getFullYear();\n\n        var today = year + '-' + mm + '-' + dd;\n        return today;\n    }\n\n    function markTaskAsComplete(e) {\n        var index = tasks.findIndex(i => i.id === e.id)\n        var updates = [...tasks];\n        updates[index].completed = true;\n        updates[index].finish_date = getCurrentDate();\n        var csrf_token = getCookie('csrftoken')\n\n        setTasks(updates);\n        taskUpdate(updates[index], csrf_token);\n    }\n\n    function focusTask(taskIndex) {\n        var newOrder = arrayMove(tasks, taskIndex, 0);\n        setTasks(newOrder)\n    };\n\n    return (\n        <>\n        \n        {isLoading === true && \n        <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\n        }\n\n        {isLoading === false && \n        <ActiveTask.Provider value={active_task}>\n            <SortableComponent items={tasks} onSortEnd={onSortEnd} onFocusTask={focusTask} onDeleteTask={deleteTask} onFinishedTask={markTaskAsComplete} onEditTask={onEditTask}/>\n        </ActiveTask.Provider>\n        }\n        </>\n    )\n}\n","import React from 'react'\n\nexport function DurationSelector({ setTaskDuration }) {\n    return (\n        <div className=\"field pb-3\">\n        <label className=\"label\">Task duration</label>\n        <div className=\"control has-icons-left\">\n            <div className=\"select\">\n                <select onChange={e => setTaskDuration(e.target.value)} defaultValue={'Short (30 min)'}> \n\n                <option>\n                    Short (30 min)\n                </option>\n                <option>\n                    Medium (1 hr)\n                </option>\n                <option>\n                    Long (2 hrs)\n                </option>\n                {/* <option>\n                    Custom (Max. 2hrs)\n                </option> */}\n\n                </select>\n            </div>\n            <div className=\"icon is-small is-left\">\n                <i className=\"fas fa-stopwatch\"></i>\n            </div>\n        </div>\n    </div>\n    )\n}\n","import React, {useState} from 'react'\nimport {getCookie, createSampleTasks, taskUpdate, createTask} from './utils'\nimport {DurationSelector} from './DurationSelector'\n\nexport default function Form({ editValue, onTaskCreated, onCancelCreate, onUpdateTasks }) {\n    const [value, setValue] = useState((Object.keys(editValue).length === 0 ? {'title': '', 'duration': 1800, 'remaining': 1800} : editValue));\n\n    const handleCreate = e => {\n        e.preventDefault();\n        if (!value.title) return;\n        \n        var csrf_token = getCookie('csrftoken');\n\n        if (!value.id) {\n            createTask(value, csrf_token);\n            onTaskCreated(value);\n            return;\n        }\n\n        taskUpdate(value, csrf_token);\n        onUpdateTasks();\n    };\n\n    const handleCreateSamples = () => {\n        createSampleTasks().then(e => onUpdateTasks());\n    }\n\n    function setTaskName(name) {\n        value.title = name;\n        setValue(value);\n    }\n\n    function setTaskDuration(duration) {\n        switch(duration) {\n            default:\n                value.duration = value.remaining = 1800;\n                setValue(value);\n                break;\n            case 'Medium (1 hr)':\n                value.duration = value.remaining = 3600;\n                setValue(value);\n                break;\n            case 'Long (2 hrs)':\n                value.duration = value.remaining = 7200;\n                setValue(value);\n                break;\n        }\n    }\n\n    return (\n        <>\n        <form onSubmit={ handleCreate }>\n\n            <h1 className=\"title is-3 has-text-centered\">\n                Create New Task\n            </h1>\n\n            <div className=\"field\">\n                <label className='label'>Task Name</label>\n                <div className=\"control is-expanded\">\n                    <input\n                        placeholder='Get stuff done!'\n                        type=\"text\" \n                        className=\"input\" \n                        onChange={e => setTaskName(e.target.value)}\n                        defaultValue={value.title}\n                        autoFocus\n                    />\n                </div>\n            </div>\n\n            <DurationSelector setTaskDuration={setTaskDuration}/>\n\n            <button type='submit' className='button is-success is-fullwidth'>\n                <span className=\"icon\">\n                    <i className=\"fas fa-check\"></i>\n                </span>\n                <span className='has-text-weight-bold'>\n                    {value.id != null &&\n                    <span>Save changes</span>\n                    }\n                    {value.title === '' &&\n                    <span>Create Task</span>\n                    }\n                </span>\n            </button>\n\n        </form>\n\n            <button className='button is-danger is-fullwidth mt-3' onClick={onCancelCreate}>\n                <span className=\"icon\">\n                    <i className=\"fas fa-times\"></i>\n                </span>\n                <span className='has-text-weight-bold'>Cancel</span>\n            </button>\n\n            {value.title === '' &&             \n            <button className='button is-info is-fullwidth mt-3' onClick={handleCreateSamples}>\n                <span className=\"icon\">\n                    <i className=\"fas fa-vial\"></i>\n                </span>\n                <span className='has-text-weight-bold'>Generate Sample Tasks</span>\n            </button>\n            }\n\n        </>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, } from 'recharts';\nimport {dateToStr} from './utils'\n\nexport default function Chart() {\n    const [data, setData] = useState([]);\n\n    function dataHeaders() {\n        var today = new Date();\n        var arr = [today];\n        var i;\n        for (i = -1; i > -8; i--) {\n            var current = today;\n            arr.unshift(current.addDays(i));\n        };\n        var headers = arr.map(d => dateToStr(d))\n        return headers;\n    }\n\n    useEffect(() => {\n        const runCall = async () => {\n            let values = await fetchData();\n            // const headers = values.map(h => h.finish_date)\n            // headers = headers.filter(Boolean)\n            var result = new Map();\n\n            values.forEach(e => {\n                if(result.get(e.finish_date)) {\n                    result.set(e.finish_date, result.get(e.finish_date) + 1);\n                } else {\n                    result.set(e.finish_date, 1);\n                }\n            });\n\n            var headers = dataHeaders();\n            var arr = []\n            \n            headers.forEach(d => {\n                var obj= {}\n                obj['name'] = d;\n                obj['Completed Tasks'] = (result.get(d) ? result.get(d): 0);\n                arr.push(obj)\n            })\n\n            setData(arr);\n        }\n\n        const fetchData = async () => {\n            const url = 'http://127.0.0.1:8000/api/task-list/'\n\n            try {\n                const response = await fetch(url);\n                return response.ok ? response.json() : null;\n            } catch (error) {\n                console.log(error);\n                return null;\n            }\n        }\n\n        runCall();\n\n    }, [])\n\n    return (\n        <div className='container has-text-centered'>\n            <h2 className='title is-4'>Completed Tasks</h2>\n            <h3 className='subtitle pb-5'>Measure your productivity in the last 7 days</h3>\n\n            <ResponsiveContainer width=\"90%\" height={400} >\n                <LineChart\n                    // width={700}\n                    // height={400}\n                    data={data}\n                >\n                    <defs>\n                        <linearGradient id=\"colorComplete\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#1abc9c\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#1abc9c\" stopOpacity={0}/>\n                        </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"Completed Tasks\" stroke=\"#1abc9c\" activeDot={{ r: 8 }} fill='url(#colorComplete)' />\n                </LineChart>\n            </ResponsiveContainer>\n      </div>\n    )\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport SortableList from './components/SortableList';\nimport {Modal} from 'react-bulma-components';\nimport Form from './components/Form'\nimport Chart from './components/Chart'\n\nexport const BASE_URL = 'http://127.0.0.1:8000/'\n\nfunction App() {\n\n  const [createTask, setCreateForm] = useState({'task': {}, 'show': false});\n  const [newTask, setNewTask] = useState({});\n  const [appView, setView] = useState('toDo');\n  const [refresh, setRefresh] = useState(false);\n  const [sort, setSort] = useState('no-sort')\n\n  function setSorting(s) {\n    console.log(s)\n    switch (s) {\n      default:\n        break;\n      case 'Longest tasks':\n        setSort('longest');\n        break;\n      case 'Shortest tasks':\n        setSort('shortest');\n        break;\n    }\n  };\n\n  function refreshTaskList() {\n    setCreateForm({'task': {}, 'show': false});\n    setRefresh(true);\n  }\n\n  function newTaskCreated(t) {\n    setNewTask(t);\n    setCreateForm({'task': {}, 'show': false});\n  }\n\n  function cancelCreate() {\n    setCreateForm({'task': false, 'show':false});\n  }\n\n  function onEditTask(value) {\n    setCreateForm({'task': value, 'show': true});\n  }\n\n  return (\n    \n    <div className=\"main py-3\">\n      \n      <h1 className='title has-text-centered py-3'>\n        Productivity <span className='has-text-weight-light'>App</span>\n      </h1>\n\n      <div className=\"tabs is-centered is-boxed\">\n        <ul>\n          <li className={\"\" + (appView === 'toDo' ? 'is-active' : '')} onClick={() => setView('toDo')}>\n            <a href=\"#/\">\n              <span className=\"icon is-small\"><i className=\"fas fa-stream\" aria-hidden=\"true\"></i></span>\n              <span>To Do</span>\n            </a>\n          </li>\n          <li className={\"\" + (appView === 'completedList' ? 'is-active' : '')} onClick={() => setView('completedList')}>\n            <a href=\"/#\">\n              <span className=\"icon is-small\"><i className=\"fas fa-check\" aria-hidden=\"true\"></i></span>\n              <span>Completed</span>\n            </a>\n          </li>\n          <li className={'' + (appView === 'stats' ? 'is-active': '')} onClick={() => setView('stats')}>\n            <a href=\"/#\">\n              <span className=\"icon is-small\"><i className=\"fas fa-chart-line\" aria-hidden=\"true\"></i></span>\n              <span>Stats</span>\n            </a>\n          </li>\n        </ul>\n      </div>\n\n\n      {/* Show coompleted list */}\n      {appView === 'completedList' &&\n        <section className='container is-fluid has-text-centered'> \n\n          <SortableList newTaskCreated={newTask} completedTasksList={true}/>\n\n        </section>\n      }\n\n      {appView === 'toDo' &&\n        <section className='container is-fluid has-text-centered'> \n\n          <div className=\"columns is-variable is-1 is-mobile\">\n\n            <div className=\"column is-9\">\n              <a href='/#' className='button mb-5 is-fullwidth is-rounded' onClick={e => setCreateForm({'task': {}, 'show': true})}>\n                <span className=\"icon\">\n                  <i className=\"fas fa-plus\"></i>\n                </span>\n                <span>Create new task</span>\n              </a>\n            </div>\n\n            <div className=\"column\">\n\n              <div className=\"control has-icons-left\">\n                <div className=\"select is-fullwidth is-rounded\">\n                  <select defaultValue='No sort' onChange={e => setSorting(e.target.value)}>\n    \n                    <option>\n                      No sort\n                    </option>\n                    <option>\n                      Longest tasks\n                    </option>\n                    <option>\n                      Shortest tasks\n                    </option>\n    \n                  </select>\n                </div>\n                <div className=\"icon is-small is-left\">\n                  <i className=\"fas fa-filter\"></i>\n                </div>\n              </div>\n              </div>\n\n          </div>\n\n          <SortableList newTaskCreated={newTask} completedTasksList={false} onEditTask={onEditTask} onUpdateTasks={refresh} onSort={sort}/>\n          \n          <Modal show={createTask.show} onClose={() => setCreateForm({'task': {}, 'show': false})}>\n            <div className=\"box modal-box\">\n              <Form editValue={createTask.task} onTaskCreated={newTaskCreated} onCancelCreate={cancelCreate} onUpdateTasks={refreshTaskList}/>\n            </div>\n          </Modal>\n\n        </section>\n      }\n\n      {appView === 'stats' && \n        <Chart />\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />\n  //</React.StrictMode>,\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}