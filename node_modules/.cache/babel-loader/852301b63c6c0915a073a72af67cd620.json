{"ast":null,"code":"var _jsxFileName = \"/Users/arturocastillo/developer/productivity-app/src/productivityreact/src/components/Timer.js\";\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport { fancyTimeFormat, getCookie } from './utils';\nimport { ActiveTask } from './SortableList';\n\nconst Timer = ({\n  seconds,\n  onTimeUpdate\n}) => {\n  // initialize timeLeft with the seconds prop\n  const [timeLeft, setTimeLeft] = useState(seconds);\n  useEffect(() => {\n    // exit early when we reach 0\n    if (!timeLeft) return; // save intervalId to clear the interval when the\n    // component re-renders\n\n    const intervalId = setInterval(() => {\n      if (timeLeft > 0) {\n        setTimeLeft(timeLeft - 1);\n        onTimeUpdate(timeLeft);\n      }\n    }, 1000); // clear interval on re-render to avoid memory leaks\n\n    return () => clearInterval(intervalId); // add timeLeft as a dependency to re-rerun the effect\n    // when we update it\n  }, [timeLeft]);\n  useEffect(() => {\n    setTimeLeft(seconds);\n  }, [seconds]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"has-text-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, fancyTimeFormat(timeLeft)));\n};\n\nexport const StartTimer = ({\n  value,\n  onTimerStart,\n  onTimerPause\n}) => {\n  const [timer, setTimer] = useState({\n    'state': 'paused',\n    'seconds': '0'\n  });\n  const {\n    active,\n    setActive\n  } = useContext(ActiveTask);\n\n  function startTimer() {\n    setTimer({\n      'state': 'running',\n      'seconds': value.remaining\n    });\n    onTimerStart();\n    setActive(true);\n  }\n\n  function pauseTimer() {\n    setTimer({\n      'state': 'paused',\n      'seconds': '0'\n    });\n    setActive(false);\n    onTimerPause();\n  }\n\n  function timeUpdate(s) {\n    var url = 'http://127.0.0.1:8000/api/task-update/' + value.id + '/';\n    var csrf_token = getCookie('csrftoken');\n    var new_remaining = value;\n    new_remaining.remaining = s;\n    fetch(url, {\n      'method': 'POST',\n      'headers': {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrf_token\n      },\n      'body': JSON.stringify(value)\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"level-item \" + (value.completed ? 'is-hidden' : ''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, timer.state === 'paused' && active === false && /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/#\",\n    onClick: startTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icon has-text-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-play\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }))), timer.state === 'running' && /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/#\",\n    onClick: pauseTimer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icon has-text-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-pause\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }))), timer.state === 'running' && /*#__PURE__*/React.createElement(Timer, {\n    seconds: timer.seconds,\n    onTimeUpdate: timeUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/arturocastillo/developer/productivity-app/src/productivityreact/src/components/Timer.js"],"names":["React","useState","useEffect","useContext","useRef","fancyTimeFormat","getCookie","ActiveTask","Timer","seconds","onTimeUpdate","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","StartTimer","value","onTimerStart","onTimerPause","timer","setTimer","active","setActive","startTimer","remaining","pauseTimer","timeUpdate","s","url","id","csrf_token","new_remaining","fetch","JSON","stringify","completed","state"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext, useRef} from 'react'\nimport {fancyTimeFormat, getCookie} from './utils'\nimport {ActiveTask} from './SortableList'\n\nconst Timer = ({ seconds, onTimeUpdate }) => {\n    // initialize timeLeft with the seconds prop\n    const [timeLeft, setTimeLeft] = useState(seconds);\n  \n    useEffect(() => {\n      // exit early when we reach 0\n        if (!timeLeft) return;\n\n      // save intervalId to clear the interval when the\n      // component re-renders\n        const intervalId = setInterval(() => {\n        if (timeLeft > 0) {\n            setTimeLeft(timeLeft - 1);\n            onTimeUpdate(timeLeft)\n        }\n        }, 1000);\n  \n      // clear interval on re-render to avoid memory leaks\n        return () => clearInterval(intervalId);\n      // add timeLeft as a dependency to re-rerun the effect\n      // when we update it\n    }, [timeLeft]);\n\n    useEffect(() => {\n        setTimeLeft(seconds)\n    }, [seconds])\n\n    return (\n    <div>\n        <h1 className='has-text-success'>{fancyTimeFormat(timeLeft)}</h1>\n    </div>\n    );\n    };\n\n\n\nexport const StartTimer = ({ value, onTimerStart, onTimerPause }) => {\n\n    const [timer, setTimer] = useState({'state': 'paused', 'seconds': '0'});\n    const {active, setActive} = useContext(ActiveTask);\n\n    function startTimer() {\n        setTimer({'state': 'running', 'seconds': value.remaining});\n        onTimerStart();\n        setActive(true);\n    }\n\n    function pauseTimer() {\n        setTimer({'state': 'paused', 'seconds': '0'});\n        setActive(false);\n        onTimerPause();\n    }\n\n    function timeUpdate(s) {\n        var url = 'http://127.0.0.1:8000/api/task-update/' + value.id + '/';\n        var csrf_token = getCookie('csrftoken');\n\n        var new_remaining = value\n        new_remaining.remaining = s\n\n        fetch(url, {\n            'method': 'POST',\n            'headers': {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrf_token,\n            },\n            'body': JSON.stringify(value)\n            });\n\n        }\n    \n    \n    return (\n        <div className={\"level-item \" + (value.completed ? 'is-hidden' : '')}>\n\n            {timer.state === 'paused' && active === false &&\n            <a href=\"/#\" onClick={startTimer}>\n                <span className=\"icon has-text-success\">\n                    <i className=\"fas fa-play\"></i>\n                </span>\n            </a>\n            }\n            \n            {timer.state === 'running' &&\n            <a href=\"/#\" onClick={pauseTimer}>\n                <span className=\"icon has-text-success\">\n                    <i className=\"fas fa-pause\"></i>\n                </span>\n            </a>\n            }\n\n            {timer.state === 'running' && \n            <Timer seconds={timer.seconds} onTimeUpdate={timeUpdate}/>\n            }\n\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}