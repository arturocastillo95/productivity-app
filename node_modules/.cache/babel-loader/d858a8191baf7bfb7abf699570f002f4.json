{"ast":null,"code":"var _jsxFileName = \"/Users/arturocastillo/developer/productivity-app/src/productivityreact/src/components/Chart.js\";\nimport arrayMove from 'array-move';\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\n\nDate.prototype.addDays = function (days) {\n  var date = new Date(this.valueOf());\n  date.setDate(date.getDate() + days);\n  return date;\n};\n\nexport default function Chart() {\n  const [data, setData] = useState(null);\n\n  function dateToStr(date) {\n    var dd = String(date.getDate()).padStart(2, '0');\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\n    var year = date.getFullYear();\n    var today = year + '-' + mm + '-' + dd;\n    return today;\n  }\n\n  function dataHeaders() {\n    var today = new Date();\n    var arr = [today];\n    var i;\n\n    for (i = -1; i > -8; i--) {\n      var current = today;\n      arr.unshift(current.addDays(i));\n    }\n\n    ;\n    var headers = arr.map(d => dateToStr(d));\n    return headers;\n  }\n\n  useEffect(() => {\n    const runCall = async () => {\n      let values = await fetchData(); // const headers = values.map(h => h.finish_date)\n      // headers = headers.filter(Boolean)\n\n      var result = new Map();\n      values.forEach(element => {\n        if (result.get(element.finish_date)) {} else {\n          result.set(element.finish_date);\n        }\n      });\n      console.log(result);\n    };\n\n    const fetchData = async () => {\n      const url = 'http://127.0.0.1:8000/api/task-list/';\n\n      try {\n        const response = await fetch(url);\n        return response.ok ? response.json() : null;\n      } catch (error) {\n        console.log(error);\n        return null;\n      }\n    };\n\n    runCall();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Graph\");\n}","map":{"version":3,"sources":["/Users/arturocastillo/developer/productivity-app/src/productivityreact/src/components/Chart.js"],"names":["arrayMove","React","useState","useEffect","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Date","prototype","addDays","days","date","valueOf","setDate","getDate","Chart","data","setData","dateToStr","dd","String","padStart","mm","getMonth","year","getFullYear","today","dataHeaders","arr","i","current","unshift","headers","map","d","runCall","values","fetchData","result","Map","forEach","element","get","finish_date","set","console","log","url","response","fetch","ok","json","error"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,aAA1B,EAAyCC,KAAzC,EAAgDC,KAAhD,EAAuDC,OAAvD,QAAsE,UAAtE;;AAEAC,IAAI,CAACC,SAAL,CAAeC,OAAf,GAAyB,UAASC,IAAT,EAAe;AACpC,MAAIC,IAAI,GAAG,IAAIJ,IAAJ,CAAS,KAAKK,OAAL,EAAT,CAAX;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAaF,IAAI,CAACG,OAAL,KAAiBJ,IAA9B;AACA,SAAOC,IAAP;AACH,CAJD;;AAMA,eAAe,SAASI,KAAT,GAAiB;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,IAAD,CAAhC;;AAEA,WAASmB,SAAT,CAAmBP,IAAnB,EAAyB;AACrB,QAAIQ,EAAE,GAAGC,MAAM,CAACT,IAAI,CAACG,OAAL,EAAD,CAAN,CAAuBO,QAAvB,CAAgC,CAAhC,EAAkC,GAAlC,CAAT;AACA,QAAIC,EAAE,GAAGF,MAAM,CAACT,IAAI,CAACY,QAAL,KAAkB,CAAnB,CAAN,CAA4BF,QAA5B,CAAqC,CAArC,EAAuC,GAAvC,CAAT;AACA,QAAIG,IAAI,GAAGb,IAAI,CAACc,WAAL,EAAX;AAEA,QAAIC,KAAK,GAAGF,IAAI,GAAG,GAAP,GAAaF,EAAb,GAAkB,GAAlB,GAAwBH,EAApC;AACA,WAAOO,KAAP;AACH;;AAED,WAASC,WAAT,GAAuB;AACnB,QAAID,KAAK,GAAG,IAAInB,IAAJ,EAAZ;AACA,QAAIqB,GAAG,GAAG,CAACF,KAAD,CAAV;AACA,QAAIG,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAC,CAAV,EAAaA,CAAC,GAAG,CAAC,CAAlB,EAAqBA,CAAC,EAAtB,EAA0B;AACtB,UAAIC,OAAO,GAAGJ,KAAd;AACAE,MAAAA,GAAG,CAACG,OAAJ,CAAYD,OAAO,CAACrB,OAAR,CAAgBoB,CAAhB,CAAZ;AACH;;AAAA;AACD,QAAIG,OAAO,GAAGJ,GAAG,CAACK,GAAJ,CAAQC,CAAC,IAAIhB,SAAS,CAACgB,CAAD,CAAtB,CAAd;AACA,WAAOF,OAAP;AACH;;AAEDhC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMmC,OAAO,GAAG,YAAY;AACxB,UAAIC,MAAM,GAAG,MAAMC,SAAS,EAA5B,CADwB,CAExB;AACA;;AACA,UAAIC,MAAM,GAAG,IAAIC,GAAJ,EAAb;AAEAH,MAAAA,MAAM,CAACI,OAAP,CAAeC,OAAO,IAAI;AACtB,YAAGH,MAAM,CAACI,GAAP,CAAWD,OAAO,CAACE,WAAnB,CAAH,EAAoC,CAEnC,CAFD,MAEO;AACHL,UAAAA,MAAM,CAACM,GAAP,CAAWH,OAAO,CAACE,WAAnB;AACH;AACJ,OAND;AAQAE,MAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AAEH,KAhBD;;AAkBA,UAAMD,SAAS,GAAG,YAAY;AAC1B,YAAMU,GAAG,GAAG,sCAAZ;;AAEA,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,eAAOC,QAAQ,CAACE,EAAT,GAAcF,QAAQ,CAACG,IAAT,EAAd,GAAgC,IAAvC;AACH,OAHD,CAGE,OAAOC,KAAP,EAAc;AACZP,QAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACA,eAAO,IAAP;AACH;AACJ,KAVD;;AAYAjB,IAAAA,OAAO;AAEV,GAjCQ,EAiCN,EAjCM,CAAT;AAmCA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ;AAGH","sourcesContent":["import arrayMove from 'array-move';\nimport React, {useState, useEffect} from 'react'\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.valueOf());\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nexport default function Chart() {\n    const [data, setData] = useState(null);\n\n    function dateToStr(date) {\n        var dd = String(date.getDate()).padStart(2,'0');\n        var mm = String(date.getMonth() + 1).padStart(2,'0');\n        var year = date.getFullYear();\n\n        var today = year + '-' + mm + '-' + dd;\n        return today;\n    }\n\n    function dataHeaders() {\n        var today = new Date();\n        var arr = [today];\n        var i;\n        for (i = -1; i > -8; i--) {\n            var current = today;\n            arr.unshift(current.addDays(i));\n        };\n        var headers = arr.map(d => dateToStr(d))\n        return headers;\n    }\n\n    useEffect(() => {\n        const runCall = async () => {\n            let values = await fetchData();\n            // const headers = values.map(h => h.finish_date)\n            // headers = headers.filter(Boolean)\n            var result = new Map();\n\n            values.forEach(element => {\n                if(result.get(element.finish_date)) {\n\n                } else {\n                    result.set(element.finish_date)\n                }\n            })\n\n            console.log(result)\n\n        }\n\n        const fetchData = async () => {\n            const url = 'http://127.0.0.1:8000/api/task-list/'\n\n            try {\n                const response = await fetch(url);\n                return response.ok ? response.json() : null;\n            } catch (error) {\n                console.log(error);\n                return null;\n            }\n        }\n\n        runCall()\n\n    }, [])\n\n    return (\n        <h1>Graph</h1>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}