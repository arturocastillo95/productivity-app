{"ast":null,"code":"var _jsxFileName = \"/Users/arturocastillo/developer/productivity-app/src/productivityreact/src/components/Chart.js\";\nimport arrayMove from 'array-move';\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nDate.prototype.addDays = function (days) {\n  var date = new Date(this.valueOf());\n  date.setDate(date.getDate() + days);\n  return date;\n};\n\nexport default function Chart() {\n  const [data, setData] = useState([]);\n\n  function dateToStr(date) {\n    var dd = String(date.getDate()).padStart(2, '0');\n    var mm = String(date.getMonth() + 1).padStart(2, '0');\n    var year = date.getFullYear();\n    var today = year + '-' + mm + '-' + dd;\n    return today;\n  }\n\n  function dataHeaders() {\n    var today = new Date();\n    var arr = [today];\n    var i;\n\n    for (i = -1; i > -8; i--) {\n      var current = today;\n      arr.unshift(current.addDays(i));\n    }\n\n    ;\n    var headers = arr.map(d => dateToStr(d));\n    return headers;\n  }\n\n  useEffect(() => {\n    const runCall = async () => {\n      let values = await fetchData(); // const headers = values.map(h => h.finish_date)\n      // headers = headers.filter(Boolean)\n\n      var result = new Map();\n      values.forEach(e => {\n        if (result.get(e.finish_date)) {\n          result.set(e.finish_date, result.get(e.finish_date) + 1);\n        } else {\n          result.set(e.finish_date, 1);\n        }\n      });\n      var headers = dataHeaders();\n      var arr = [];\n      headers.forEach(d => {\n        var obj = {};\n        obj['name'] = d;\n        obj['completed'] = result.get(d) ? result.get(d) : 0;\n        arr.push(obj);\n      });\n      setData(arr);\n    };\n\n    const fetchData = async () => {\n      const url = 'http://127.0.0.1:8000/api/task-list/';\n\n      try {\n        const response = await fetch(url);\n        return response.ok ? response.json() : null;\n      } catch (error) {\n        console.log(error);\n        return null;\n      }\n    };\n\n    runCall(); // const data_1 = [\n    //     {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n    //     {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n    //     {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n    //     {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n    //     {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n    //     {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n    //     {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n    // ];\n    // console.log(data_1)\n    // setData(data_1)\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <h1>Graph</h1>\n    React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LineChart, {\n      width: 500,\n      height: 300,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"pv\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#82ca9d\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    })))\n  );\n}","map":{"version":3,"sources":["/Users/arturocastillo/developer/productivity-app/src/productivityreact/src/components/Chart.js"],"names":["arrayMove","React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Date","prototype","addDays","days","date","valueOf","setDate","getDate","Chart","data","setData","dateToStr","dd","String","padStart","mm","getMonth","year","getFullYear","today","dataHeaders","arr","i","current","unshift","headers","map","d","runCall","values","fetchData","result","Map","forEach","e","get","finish_date","set","obj","push","url","response","fetch","ok","json","error","console","log","top","right","left","bottom","r"],"mappings":"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","sourcesContent":["import arrayMove from 'array-move';\nimport React, {useState, useEffect} from 'react'\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  } from 'recharts';\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.valueOf());\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nexport default function Chart() {\n    const [data, setData] = useState([]);\n\n    function dateToStr(date) {\n        var dd = String(date.getDate()).padStart(2,'0');\n        var mm = String(date.getMonth() + 1).padStart(2,'0');\n        var year = date.getFullYear();\n\n        var today = year + '-' + mm + '-' + dd;\n        return today;\n    }\n\n    function dataHeaders() {\n        var today = new Date();\n        var arr = [today];\n        var i;\n        for (i = -1; i > -8; i--) {\n            var current = today;\n            arr.unshift(current.addDays(i));\n        };\n        var headers = arr.map(d => dateToStr(d))\n        return headers;\n    }\n\n    useEffect(() => {\n        const runCall = async () => {\n            let values = await fetchData();\n            // const headers = values.map(h => h.finish_date)\n            // headers = headers.filter(Boolean)\n            var result = new Map();\n\n            values.forEach(e => {\n                if(result.get(e.finish_date)) {\n                    result.set(e.finish_date, result.get(e.finish_date) + 1);\n                } else {\n                    result.set(e.finish_date, 1);\n                }\n            });\n\n            var headers = dataHeaders();\n            var arr = []\n            \n            headers.forEach(d => {\n                var obj= {}\n                obj['name'] = d;\n                obj['completed'] = (result.get(d) ? result.get(d): 0);\n                arr.push(obj)\n            })\n\n            setData(arr);\n        }\n\n        const fetchData = async () => {\n            const url = 'http://127.0.0.1:8000/api/task-list/'\n\n            try {\n                const response = await fetch(url);\n                return response.ok ? response.json() : null;\n            } catch (error) {\n                console.log(error);\n                return null;\n            }\n        }\n\n        runCall();\n\n        // const data_1 = [\n        //     {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n        //     {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n        //     {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n        //     {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n        //     {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n        //     {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n        //     {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n        // ];\n\n        // console.log(data_1)\n        // setData(data_1)\n    }, [])\n\n    return (\n        // <h1>Graph</h1>\n        <>\n        <LineChart\n            width={500}\n            height={300}\n            data={data}\n            margin={{\n                top: 5, right: 30, left: 20, bottom: 5,\n            }}\n        >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n      </LineChart>\n      </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}