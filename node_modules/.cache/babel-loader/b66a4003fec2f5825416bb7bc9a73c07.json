{"ast":null,"code":"import _regeneratorRuntime from\"/Users/arturocastillo/developer/productivity-app/src/productivityreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/arturocastillo/developer/productivity-app/src/productivityreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/arturocastillo/developer/productivity-app/src/productivityreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{ResponsiveContainer,LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend}from'recharts';import{dateToStr}from'./utils';export default function Chart(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];function dataHeaders(){var today=new Date();var arr=[today];var i;for(i=-1;i>-8;i--){var current=today;arr.unshift(current.addDays(i));};var headers=arr.map(function(d){return dateToStr(d);});return headers;}useEffect(function(){var runCall=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var values,result,headers,arr;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchData();case 2:values=_context.sent;// const headers = values.map(h => h.finish_date)\n// headers = headers.filter(Boolean)\nresult=new Map();values.forEach(function(e){if(result.get(e.finish_date)){result.set(e.finish_date,result.get(e.finish_date)+1);}else{result.set(e.finish_date,1);}});headers=dataHeaders();arr=[];headers.forEach(function(d){var obj={};obj['name']=d;obj['Completed Tasks']=result.get(d)?result.get(d):0;arr.push(obj);});setData(arr);case 9:case\"end\":return _context.stop();}}},_callee);}));return function runCall(){return _ref.apply(this,arguments);};}();var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var url,response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:url='http://127.0.0.1:8000/api/task-list/';_context2.prev=1;_context2.next=4;return fetch(url);case 4:response=_context2.sent;return _context2.abrupt(\"return\",response.ok?response.json():null);case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](1);console.log(_context2.t0);return _context2.abrupt(\"return\",null);case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[1,8]]);}));return function fetchData(){return _ref2.apply(this,arguments);};}();runCall();},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"container has-text-centered\"},/*#__PURE__*/React.createElement(\"h2\",{className:\"title is-4\"},\"Completed Tasks\"),/*#__PURE__*/React.createElement(\"h3\",{className:\"subtitle pb-5\"},\"Measure your productivity in the last 7 days\"),/*#__PURE__*/React.createElement(ResponsiveContainer,{width:\"90%\",height:400},/*#__PURE__*/React.createElement(LineChart// width={700}\n// height={400}\n,{data:data},/*#__PURE__*/React.createElement(\"defs\",null,/*#__PURE__*/React.createElement(\"linearGradient\",{id:\"colorComplete\",x1:\"0\",y1:\"0\",x2:\"0\",y2:\"1\"},/*#__PURE__*/React.createElement(\"stop\",{offset:\"5%\",stopColor:\"#1abc9c\",stopOpacity:0.8}),/*#__PURE__*/React.createElement(\"stop\",{offset:\"95%\",stopColor:\"#1abc9c\",stopOpacity:0}))),/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"name\"}),/*#__PURE__*/React.createElement(YAxis,null),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:\"Completed Tasks\",stroke:\"#1abc9c\",activeDot:{r:8},fill:\"url(#colorComplete)\"}))));}","map":{"version":3,"sources":["/Users/arturocastillo/developer/productivity-app/src/productivityreact/src/components/Chart.js"],"names":["React","useState","useEffect","ResponsiveContainer","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","dateToStr","Chart","data","setData","dataHeaders","today","Date","arr","i","current","unshift","addDays","headers","map","d","runCall","fetchData","values","result","Map","forEach","e","get","finish_date","set","obj","push","url","fetch","response","ok","json","console","log","r"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, } from 'recharts';\nimport {dateToStr} from './utils'\n\nexport default function Chart() {\n    const [data, setData] = useState([]);\n\n    function dataHeaders() {\n        var today = new Date();\n        var arr = [today];\n        var i;\n        for (i = -1; i > -8; i--) {\n            var current = today;\n            arr.unshift(current.addDays(i));\n        };\n        var headers = arr.map(d => dateToStr(d))\n        return headers;\n    }\n\n    useEffect(() => {\n        const runCall = async () => {\n            let values = await fetchData();\n            // const headers = values.map(h => h.finish_date)\n            // headers = headers.filter(Boolean)\n            var result = new Map();\n\n            values.forEach(e => {\n                if(result.get(e.finish_date)) {\n                    result.set(e.finish_date, result.get(e.finish_date) + 1);\n                } else {\n                    result.set(e.finish_date, 1);\n                }\n            });\n\n            var headers = dataHeaders();\n            var arr = []\n            \n            headers.forEach(d => {\n                var obj= {}\n                obj['name'] = d;\n                obj['Completed Tasks'] = (result.get(d) ? result.get(d): 0);\n                arr.push(obj)\n            })\n\n            setData(arr);\n        }\n\n        const fetchData = async () => {\n            const url = 'http://127.0.0.1:8000/api/task-list/'\n\n            try {\n                const response = await fetch(url);\n                return response.ok ? response.json() : null;\n            } catch (error) {\n                console.log(error);\n                return null;\n            }\n        }\n\n        runCall();\n\n    }, [])\n\n    return (\n        <div className='container has-text-centered'>\n            <h2 className='title is-4'>Completed Tasks</h2>\n            <h3 className='subtitle pb-5'>Measure your productivity in the last 7 days</h3>\n\n            <ResponsiveContainer width=\"90%\" height={400} >\n                <LineChart\n                    // width={700}\n                    // height={400}\n                    data={data}\n                >\n                    <defs>\n                        <linearGradient id=\"colorComplete\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#1abc9c\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#1abc9c\" stopOpacity={0}/>\n                        </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"Completed Tasks\" stroke=\"#1abc9c\" activeDot={{ r: 8 }} fill='url(#colorComplete)' />\n                </LineChart>\n            </ResponsiveContainer>\n      </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}