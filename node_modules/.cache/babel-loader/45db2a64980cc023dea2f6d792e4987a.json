{"ast":null,"code":"var _jsxFileName = \"/Users/arturocastillo/developer/productivity-app/src/productivityreact/src/components/Chart.js\";\nimport arrayMove from 'array-move';\nimport React, { useState, useEffect } from 'react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { dateToStr } from './utils';\n\nDate.prototype.addDays = function (days) {\n  var date = new Date(this.valueOf());\n  date.setDate(date.getDate() + days);\n  return date;\n};\n\nexport default function Chart() {\n  const [data, setData] = useState([]);\n\n  function dataHeaders() {\n    var today = new Date();\n    var arr = [today];\n    var i;\n\n    for (i = -1; i > -8; i--) {\n      var current = today;\n      arr.unshift(current.addDays(i));\n    }\n\n    ;\n    var headers = arr.map(d => dateToStr(d));\n    return headers;\n  }\n\n  useEffect(() => {\n    const runCall = async () => {\n      let values = await fetchData(); // const headers = values.map(h => h.finish_date)\n      // headers = headers.filter(Boolean)\n\n      var result = new Map();\n      values.forEach(e => {\n        if (result.get(e.finish_date)) {\n          result.set(e.finish_date, result.get(e.finish_date) + 1);\n        } else {\n          result.set(e.finish_date, 1);\n        }\n      });\n      var headers = dataHeaders();\n      var arr = [];\n      headers.forEach(d => {\n        var obj = {};\n        obj['name'] = d;\n        obj['Completed Tasks'] = result.get(d) ? result.get(d) : 0;\n        arr.push(obj);\n      });\n      setData(arr);\n    };\n\n    const fetchData = async () => {\n      const url = 'http://127.0.0.1:8000/api/task-list/';\n\n      try {\n        const response = await fetch(url);\n        return response.ok ? response.json() : null;\n      } catch (error) {\n        console.log(error);\n        return null;\n      }\n    };\n\n    runCall();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container has-text-centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title is-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Completed Tasks\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"subtitle pb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Measure your productivity in the last 7 days\"), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"90%\",\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LineChart // width={700}\n  // height={400}\n  , {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"colorComplete\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: \"#1abc9c\",\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: \"#1abc9c\",\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"Completed Tasks\",\n    stroke: \"#1abc9c\",\n    activeDot: {\n      r: 8\n    },\n    fill: \"url(#colorComplete)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/arturocastillo/developer/productivity-app/src/productivityreact/src/components/Chart.js"],"names":["arrayMove","React","useState","useEffect","ResponsiveContainer","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","dateToStr","Date","prototype","addDays","days","date","valueOf","setDate","getDate","Chart","data","setData","dataHeaders","today","arr","i","current","unshift","headers","map","d","runCall","values","fetchData","result","Map","forEach","e","get","finish_date","set","obj","push","url","response","fetch","ok","json","error","console","log","r"],"mappings":"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","sourcesContent":["import arrayMove from 'array-move';\nimport React, {useState, useEffect} from 'react'\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, } from 'recharts';\nimport {dateToStr} from './utils'\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.valueOf());\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nexport default function Chart() {\n    const [data, setData] = useState([]);\n\n    function dataHeaders() {\n        var today = new Date();\n        var arr = [today];\n        var i;\n        for (i = -1; i > -8; i--) {\n            var current = today;\n            arr.unshift(current.addDays(i));\n        };\n        var headers = arr.map(d => dateToStr(d))\n        return headers;\n    }\n\n    useEffect(() => {\n        const runCall = async () => {\n            let values = await fetchData();\n            // const headers = values.map(h => h.finish_date)\n            // headers = headers.filter(Boolean)\n            var result = new Map();\n\n            values.forEach(e => {\n                if(result.get(e.finish_date)) {\n                    result.set(e.finish_date, result.get(e.finish_date) + 1);\n                } else {\n                    result.set(e.finish_date, 1);\n                }\n            });\n\n            var headers = dataHeaders();\n            var arr = []\n            \n            headers.forEach(d => {\n                var obj= {}\n                obj['name'] = d;\n                obj['Completed Tasks'] = (result.get(d) ? result.get(d): 0);\n                arr.push(obj)\n            })\n\n            setData(arr);\n        }\n\n        const fetchData = async () => {\n            const url = 'http://127.0.0.1:8000/api/task-list/'\n\n            try {\n                const response = await fetch(url);\n                return response.ok ? response.json() : null;\n            } catch (error) {\n                console.log(error);\n                return null;\n            }\n        }\n\n        runCall();\n\n    }, [])\n\n    return (\n        <div className='container has-text-centered'>\n            <h2 className='title is-4'>Completed Tasks</h2>\n            <h3 className='subtitle pb-5'>Measure your productivity in the last 7 days</h3>\n\n            <ResponsiveContainer width=\"90%\" height={400} >\n                <LineChart\n                    // width={700}\n                    // height={400}\n                    data={data}\n                >\n                    <defs>\n                        <linearGradient id=\"colorComplete\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#1abc9c\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#1abc9c\" stopOpacity={0}/>\n                        </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"Completed Tasks\" stroke=\"#1abc9c\" activeDot={{ r: 8 }} fill='url(#colorComplete)' />\n                </LineChart>\n            </ResponsiveContainer>\n      </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}